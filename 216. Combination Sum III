216. Combination Sum III

Find all valid combinations of k numbers that sum up to n such that the following conditions are true:

Only numbers 1 through 9 are used.
Each number is used at most once.
Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.

class Solution {
    public void find(int i,int k,int n,List<List<Integer>> ans,List<Integer> arr,int sumx){
        if(i>=n || i==10){
            int sum=arr.stream().mapToInt(Integer::valueOf).sum();
            if(sum==n && arr.size()==k){
                ans.add(new ArrayList<>(arr));
            }
            return;
        }
        if(i<=sumx){
            arr.add(i);
            find(i+1,k,n,ans,arr,sumx-i);
            if(!arr.isEmpty())
            arr.remove(arr.size()-1);
        }
        find(i+1,k,n,ans,arr,sumx);
    }
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> ans=new ArrayList<>();
        List<Integer> arr=new ArrayList<>();
        find(1,k,n,ans,arr,n);
        return ans;
    }
}
