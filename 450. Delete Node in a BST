450. Delete Node in a BST

Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.
Basically, the deletion can be divided into two stages:
Search for a node to remove.
If the node is found, delete the node.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int smallnode(TreeNode root){
        if(root.left!=null){
            return(smallnode(root.left));
        }
        return root.val;
    }
    public TreeNode delnode(TreeNode root,int k){
        if(root==null){
            return root;
        }
        if(root.val==k){
            if(root.right==null && root.left==null){
                root=null;
                return root;
            }else if(root.right!=null && root.left==null){
                root=root.right;
            }else if(root.left!=null && root.right==null){
                root=root.left;
            }else if(root.left!=null && root.right!=null){
                int min=smallnode(root.right);
                root.val=min;
                root.right=delnode(root.right,min);
            }
        }else{
            if(k<root.val){
                root.left=delnode(root.left,k);
            }else{
                root.right=delnode(root.right,k);
            }
        }
        return root;
    }
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root==null){
            return null;
        }
        root=delnode(root,key);
        return root;

    }
}
