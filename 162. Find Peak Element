
162. Find Peak Element
A peak element is an element that is strictly greater than its neighbors.
Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.
You may imagine that nums[-1] = nums[n] = -∞. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.
You must write an algorithm that runs in O(log n) time.

class Solution {
    public int find(int i,int j,int[] nums){
        if(i>j){
            return -1;
        }
        if(i==0){
            if(nums[i+1]<nums[i]){return i;}
        }
        if(j==nums.length-1){
            if(nums[j-1]<nums[j]){return j;}
        }
        if((i>0 && i<nums.length-1) && nums[i-1]<nums[i] && nums[i+1]<nums[i]){return i;}
        if((j>0 && j<nums.length-1) && nums[j-1]<nums[j] && nums[j+1]<nums[j]){return j;}
        int mid = i+(j-i)/2;
        if(mid==0){
            if(nums[mid+1]<nums[mid]){return mid;}else{return -1;}
        }else if(mid==nums.length-1){
            if(nums[mid]>nums[mid-1]){return mid;}else{return -1;}
        }else if(nums[mid-1]<nums[mid] && nums[mid]>nums[mid+1]){
            return mid;
        }
        return Math.max(find(i,mid-1,nums),find(mid+1,j,nums));
    }
    public int findPeakElement(int[] nums) {
        if(nums.length==1){return 0;}
        return find(0,nums.length-1,nums);
    }
}
