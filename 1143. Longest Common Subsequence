1143. Longest Common Subsequence

Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.
A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.
For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.


class Solution {
    public int find(int i,int j,String text1,String text2,int[][] dp){
        if(i<0 || j<0){
            return 0;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        if(text1.charAt(i)==text2.charAt(j)){
            return dp[i][j]=1+find(i-1,j-1,text1,text2,dp);
        }else{
            return dp[i][j]=Math.max(find(i,j-1,text1,text2,dp),find(i-1,j,text1,text2,dp));
        }
    }
    public int longestCommonSubsequence(String text1, String text2) {
        int i=text1.length()-1;
        int j=text2.length()-1;
        int[][] dp=new int[i+1][j+1];
        for(int x=0;x<dp.length;x++)
        Arrays.fill(dp[x],-1);
        return find(i,j,text1,text2,dp);
    }
}

 
